// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviePick.Database;

namespace MoviePick.Migrations
{
    [DbContext(typeof(MoviePickContext))]
    partial class MoviePickContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviePick.Database.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("DateTimeOfComment")
                        .HasColumnType("datetime");

                    b.Property<int>("MovieAndTvshowId")
                        .HasColumnName("MovieAndTVShowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MovieAndTvshowId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("MoviePick.Database.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool?>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfRatings")
                        .HasColumnType("int");

                    b.Property<byte[]>("Poster")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("RunningTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MovieAndTVShow");
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshowGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieAndTvshowId")
                        .HasColumnName("MovieAndTVShowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieAndTvshowId");

                    b.ToTable("MovieAndTVShowGenre");
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshowNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MovieAndTvshowId")
                        .HasColumnName("MovieAndTVShowId")
                        .HasColumnType("int");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieAndTvshowId");

                    b.HasIndex("NewsId");

                    b.ToTable("MovieAndTVShowNews");
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshowPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MovieAndTvshowId")
                        .HasColumnName("MovieAndTVShowId")
                        .HasColumnType("int");

                    b.Property<string>("NameInMovie")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieAndTvshowId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId");

                    b.ToTable("MovieAndTVShowPerson");
                });

            modelBuilder.Entity("MoviePick.Database.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<byte[]>("CoverPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateTimeOfNews")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("MoviePick.Database.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("MoviePick.Database.ProductionCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductionCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProductionCompany");
                });

            modelBuilder.Entity("MoviePick.Database.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MovieAndTvshowId")
                        .HasColumnName("MovieAndTVShowId")
                        .HasColumnType("int");

                    b.Property<string>("QuoteText")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("MovieAndTvshowId");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("MoviePick.Database.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("MovieAndTvshowId")
                        .HasColumnName("MovieAndTVShowId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MovieAndTvshowId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("MoviePick.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MoviePick.Database.TvshowSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Finished")
                        .HasColumnType("bit");

                    b.Property<int>("MovieAndTvshowId")
                        .HasColumnName("MovieAndTVShowId")
                        .HasColumnType("int");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("MovieAndTvshowId");

                    b.ToTable("TVShowSeason");
                });

            modelBuilder.Entity("MoviePick.Database.TvshowSeasonEpisode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("date");

                    b.Property<string>("EpisodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TvshowId")
                        .HasColumnName("TVShowId")
                        .HasColumnType("int");

                    b.Property<int>("TvshowSeasonId")
                        .HasColumnName("TVShowSeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TvshowSeasonId");

                    b.ToTable("TVShowSeasonEpisode");
                });

            modelBuilder.Entity("MoviePick.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MoviePick.Database.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("MoviePick.Database.Comment", b =>
                {
                    b.HasOne("MoviePick.Database.User", "AppUser")
                        .WithMany("Comment")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK__Comment__AppUser__412EB0B6")
                        .IsRequired();

                    b.HasOne("MoviePick.Database.MovieAndTvshow", "MovieAndTvshow")
                        .WithMany("Comment")
                        .HasForeignKey("MovieAndTvshowId")
                        .HasConstraintName("FK__Comment__MovieAn__4222D4EF")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshow", b =>
                {
                    b.HasOne("MoviePick.Database.ProductionCompany", "ProductionCompany")
                        .WithMany("MovieAndTvshow")
                        .HasForeignKey("ProductionCompanyId")
                        .HasConstraintName("FK__MovieAndT__Produ__4316F928")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshowGenre", b =>
                {
                    b.HasOne("MoviePick.Database.Genre", "Genre")
                        .WithMany("MovieAndTvshowGenre")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK__MovieAndT__Genre__440B1D61")
                        .IsRequired();

                    b.HasOne("MoviePick.Database.MovieAndTvshow", "MovieAndTvshow")
                        .WithMany("MovieAndTvshowGenre")
                        .HasForeignKey("MovieAndTvshowId")
                        .HasConstraintName("FK__MovieAndT__Movie__44FF419A")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshowNews", b =>
                {
                    b.HasOne("MoviePick.Database.MovieAndTvshow", "MovieAndTvshow")
                        .WithMany("MovieAndTvshowNews")
                        .HasForeignKey("MovieAndTvshowId")
                        .HasConstraintName("FK__MovieAndT__Movie__45F365D3");

                    b.HasOne("MoviePick.Database.News", "News")
                        .WithMany("MovieAndTvshowNews")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK__MovieAndT__NewsI__46E78A0C");
                });

            modelBuilder.Entity("MoviePick.Database.MovieAndTvshowPerson", b =>
                {
                    b.HasOne("MoviePick.Database.MovieAndTvshow", "MovieAndTvshow")
                        .WithMany("MovieAndTvshowPerson")
                        .HasForeignKey("MovieAndTvshowId")
                        .HasConstraintName("FK__MovieAndT__Movie__47DBAE45")
                        .IsRequired();

                    b.HasOne("MoviePick.Database.Person", "Person")
                        .WithMany("MovieAndTvshowPerson")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK__MovieAndT__Perso__48CFD27E")
                        .IsRequired();

                    b.HasOne("MoviePick.Database.Role", "Role")
                        .WithMany("MovieAndTvshowPerson")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__MovieAndT__RoleI__49C3F6B7")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.News", b =>
                {
                    b.HasOne("MoviePick.Database.User", "Author")
                        .WithMany("News")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__News__AuthorId__4AB81AF0")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.Quote", b =>
                {
                    b.HasOne("MoviePick.Database.MovieAndTvshow", "MovieAndTvshow")
                        .WithMany("Quote")
                        .HasForeignKey("MovieAndTvshowId")
                        .HasConstraintName("FK__Quote__MovieAndT__4BAC3F29")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.Rating", b =>
                {
                    b.HasOne("MoviePick.Database.User", "AppUser")
                        .WithMany("Rating")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("FK__Rating__AppUserI__4CA06362")
                        .IsRequired();

                    b.HasOne("MoviePick.Database.MovieAndTvshow", "MovieAndTvshow")
                        .WithMany("Rating")
                        .HasForeignKey("MovieAndTvshowId")
                        .HasConstraintName("FK__Rating__MovieAnd__4D94879B")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.TvshowSeason", b =>
                {
                    b.HasOne("MoviePick.Database.MovieAndTvshow", "MovieAndTvshow")
                        .WithMany("TvshowSeason")
                        .HasForeignKey("MovieAndTvshowId")
                        .HasConstraintName("FK__TVShowSea__Movie__4E88ABD4")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.TvshowSeasonEpisode", b =>
                {
                    b.HasOne("MoviePick.Database.TvshowSeason", "TvshowSeason")
                        .WithMany("TvshowSeasonEpisode")
                        .HasForeignKey("TvshowSeasonId")
                        .HasConstraintName("FK__TVShowSea__TVSho__4F7CD00D")
                        .IsRequired();
                });

            modelBuilder.Entity("MoviePick.Database.User", b =>
                {
                    b.HasOne("MoviePick.Database.UserType", "UserType")
                        .WithMany("User")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK__User__UserTypeId__5070F446")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
